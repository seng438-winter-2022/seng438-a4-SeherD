// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class InvalidSignInNoInputTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void invalidSignInNoInput() {
    // Test name: invalidSignInNoInput
    // Step # | name | target | value
    // 1 | open | https://www.sportchek.ca/ | 
    driver.get("https://www.sportchek.ca/");
    // 2 | setWindowSize | 1595x921 | 
    driver.manage().window().setSize(new Dimension(1595, 921));
    // 3 | mouseOver | id=headerPickupStoreName | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.id("headerPickupStoreName"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | mouseOut | id=headerPickupStoreName | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 5 | mouseOver | css=.header-pickup-store__link-container | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.cssSelector(".header-pickup-store__link-container"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 6 | mouseOut | css=.header-pickup-store__link-container | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 7 | mouseOver | css=.header-cart__text | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.cssSelector(".header-cart__text"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 8 | mouseOut | css=.header-cart__text | 
    // Move mouse over to the sign in button at the top of the page
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 9 | click | css=.enterprise-account__button_sign-in | 
    // Click sign in button
    driver.findElement(By.cssSelector(".enterprise-account__button_sign-in")).click();
    // 10 | assertText | css=#gigya-login-form .gigya-composite-control-header | Triangle ID Sign In
    // Check to see if the Sign In page header is visible on the page
    assertThat(driver.findElement(By.cssSelector("#gigya-login-form .gigya-composite-control-header")).getText(), is("Triangle ID Sign In"));
    // 11 | click | css=#gigya-login-form .gigya-input-text | 
    // Click on password input field
    driver.findElement(By.cssSelector("#gigya-login-form .gigya-input-text")).click();
    // 12 | click | css=#gigya-login-form .gigya-composite-control-submit > .gigya-input-submit | 
    // Click on Sign in Button to submit
    driver.findElement(By.cssSelector("#gigya-login-form .gigya-composite-control-submit > .gigya-input-submit")).click();
    // 13 | assertText | css=.gigya-error-msg:nth-child(3) | This field is required.
    // Check that error message pops up letting user know that an password must be inputted
    assertThat(driver.findElement(By.cssSelector(".gigya-error-msg:nth-child(3)")).getText(), is("This field is required."));
    // 14 | assertText | css=.gigya-error-msg-active | This field is required.
    // Check that error message pops up letting user know that an email must be inputted
    assertThat(driver.findElement(By.cssSelector(".gigya-error-msg-active")).getText(), is("This field is required."));
    // 15 | mouseOver | css=#gigya-login-form .gigya-composite-control-submit > .gigya-input-submit | 
    {
      WebElement element = driver.findElement(By.cssSelector("#gigya-login-form .gigya-composite-control-submit > .gigya-input-submit"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 16 | mouseOut | css=#gigya-login-form .gigya-composite-control-submit > .gigya-input-submit | 
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
  }
}
